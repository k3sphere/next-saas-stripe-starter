// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map(name: "user_id")
  type              String
  provider          String
  providerAccountId String   @map(name: "provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map(name: "session_token")
  userId       String   @map(name: "user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  role          UserRole  @default(USER)

  accounts Account[]
  clusters K8sCluster[]
  sessions Session[]
  authenticators Authenticator[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique @map(name: "credential_id")
  userId               String  @map(name: "user_id")
  providerAccountId    String  @map(name: "provider_account_id")
  credentialPublicKey  String  @map(name: "credential_public_key")
  counter              Int
  credentialDeviceType String  @map(name: "credential_device_type")
  credentialBackedUp   Boolean @map(name: "credential_backed_up")
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map(name: "authenticators")
}

model K8sCluster {
  id                String   @id @default(cuid())
  userId            String   @map(name: "user_id")
  name              String   @unique
  location          String
  apiKey            String?   @map(name: "api_key")
  network           String?
  publicKey         String?  @map(name: "public_key")
  ip                String?
  host              String?
  dns               String?
  oidc              Boolean? @default(false)
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  delete            Boolean? @default(false)
  synched           Boolean? @default(false)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  machines          Machine[]
  relays            ClusterRelay[]
  services          Service[]
  regionPorts       RegionPort[]
  @@map(name: "clusters")
}

model Region {
  id String @id
  name String
  continent String
  cdnAccount String?
  cdnKey     String?
  active   Boolean
  servers  RelayServer[]
  regionPorts RegionPort[]
  @@map(name: "regions")
}

model RegionPort {
  id           String   @id
  location     String
  port         Int
  clusterId    String?  @map(name: "cluster_id")
  serviceId    String?  @map(name: "service_id")
  servicePort  Int?     @map(name: "service_port")
  active       Boolean? @default(false)
  cluster      K8sCluster? @relation(fields: [clusterId], references: [id], onDelete: Cascade)
  region       Region  @relation(fields: [location], references: [id], onDelete: Cascade)
  service      Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  @@map(name: "region_ports")
}

model RelayServer {
  id        String   @id
  ip        String
  url       String
  location  String
  active    Boolean
  clusters  ClusterRelay[]
  region    Region  @relation(fields: [location], references: [id], onDelete: Cascade)
  @@map(name: "relay_servers")
}

model ClusterRelay {
  id           String   @id @default(cuid())
  clusterId    String   @map(name: "cluster_id")
  relayId      String   @map(name: "relay_id")
  cluster      K8sCluster @relation(fields: [clusterId], references: [id], onDelete: Cascade)
  relay        RelayServer @relation(fields: [relayId], references: [id], onDelete: Cascade)
  @@map(name: "cluster_relay")
}

model Machine {
  id                String   @id
  clusterId         String   @map(name: "cluster_id")
  name              String
  vlan              String
  port              Int
  username          String
  ip                String
  publicIp          String?  @map(name: "public_ip")
  gatewayId         String?  @map(name: "gateway_id")
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  delete            Boolean? @default(false)
  // Define self-referencing relation
  gateway           Machine? @relation(name: "MachineGateway", fields: [gatewayId], references: [id], onDelete: Cascade)
  machines          Machine[] @relation(name: "MachineGateway")
  cluster           K8sCluster @relation(fields: [clusterId], references: [id], onDelete: Cascade)
  @@map(name: "machines")
}

model Service {
  id                String   @id @default(cuid())
  clusterId         String   @map(name: "cluster_id")
  name              String
  namespace         String
  ip                String
  ports             String[]
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  cluster           K8sCluster @relation(fields: [clusterId], references: [id], onDelete: Cascade)
  regionPorts       RegionPort[]
  @@map(name: "services")
}